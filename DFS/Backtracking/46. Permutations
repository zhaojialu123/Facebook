Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> helper;
        vector<bool> used(nums.size(), false);
        dfs(nums, res, helper, used, 0);
        return res;
    }
    
    void dfs(vector<int>& nums, vector<vector<int>>& res, vector<int>& helper, vector<bool>& used, int level)
    {
        if(level == nums.size())
        {
            res.push_back(helper);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(used[i] == true)
                continue;
            
            helper.push_back(nums[i]);
            used[i] = true;
            dfs(nums, res, helper, used, level+1);
            helper.pop_back();
            used[i] = false;
        }
        
    }
};


Time complexity: O(N!)
