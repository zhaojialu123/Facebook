Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]



class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int i = 0;
        for(int j = 0; j < nums.size(); j++)
        {
            if(nums[j] != 0)
            {
               nums[i] = nums[j];
                i++;
            }
        }
        while(i < nums.size())
        {
            nums[i] = 0;
            i++;
        }
        
    }
};


Follow up: 
decrease writing operation, the order doesn't matter
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int start = 0;
        int end = nums.size() - 1;
        while(start < end)
        {
            if(nums[start] == 0 && nums[end] !=0)
            {
                swap(nums, start, end);
                start++;
                end--;
            }
            else if(nums[start] == 0 && nums[end] == 0)
            {
                end--;
            }
            else if(nums[start] != 0 && nums[end] == 0)
            {
                start++;
            }
            else
            {
                start++;
                end--;
            }
        }
        
    }
    
    void swap(vector<int>& nums, int start, int end)
    {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }
};
