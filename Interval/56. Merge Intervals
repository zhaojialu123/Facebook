/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
         if(intervals.size() == 0)
        {
            return res;
        }
        sort(intervals.begin(), intervals.end(), [](const Interval i1, const Interval i2) -> bool
             {
                return i1.start < i2.start; 
             });
        
        Interval temp = intervals[0];
        for(int i = 1; i < intervals.size(); i++)
        {
            if(intervals[i].start > temp.end)
            {
                res.push_back(temp);
                temp = intervals[i];
            }
            else
            {
                if(intervals[i].end > temp.end)
                    temp.end = intervals[i].end;
            }
        }
        
        res.push_back(temp);
        return res;
    }
};
