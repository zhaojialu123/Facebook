/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        // merge sort 
        if(head == NULL || head -> next == NULL)
            return head;
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = NULL;
        
        while(fast != NULL && fast -> next != NULL)
        {
            prev = slow;
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        
        
        prev -> next = NULL;
        ListNode* head1 = sortList(head);
        ListNode* head2 = sortList(slow);
        

        ListNode* new_head = mergeList(head1, head2);
        
        return new_head;
        
        
    }
    
    ListNode* mergeList(ListNode* l1, ListNode* l2)
    {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        ListNode* dummy = new ListNode(0);
        ListNode* pointer = dummy;
        
        while(l1 != NULL && l2 != NULL)
        {
        
            if(l1 -> val < l2 -> val)
            {
                pointer -> next = l1;
                l1 = l1 -> next;
                pointer = pointer -> next;
            }
            else
            {
                pointer -> next = l2;
                l2 = l2 -> next;
                pointer = pointer -> next;
            }
        }
        
        while(l1 != NULL)
        {
            pointer -> next = l1;
            l1 = l1 -> next;
            pointer = pointer -> next;
        }
        
        while(l2 != NULL)
        {
            pointer -> next = l2;
            l2 = l2 -> next;
            pointer = pointer -> next;
        }
        
        return dummy -> next;
    }
};

Time Complexity: O(NlogN)
