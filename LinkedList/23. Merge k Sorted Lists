// priority queue
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        auto comp = [](ListNode* a, ListNode* b) {return a -> val > b -> val;};
        priority_queue<ListNode*, vector<ListNode*>, decltype(comp)> pq(comp);
        
        ListNode* dummy = new ListNode(0);
        ListNode* pointer = dummy;
        
        for(int i = 0; i < lists.size(); i++)
        {
            if(lists[i] != NULL)
                pq.push(lists[i]);
        }
        
        while(!pq.empty())
        {
           ListNode* temp = pq.top();
            pq.pop();
            pointer -> next = temp;
            if(temp -> next != NULL)
                pq.push(temp -> next);
            
            pointer = pointer -> next;
                
        }
        
        return dummy -> next;
    }
};
