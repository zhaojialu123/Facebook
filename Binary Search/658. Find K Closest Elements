// better idea binary search 
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int left = 0, right = arr.size() - k;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (x - arr[mid] > arr[mid + k] - x) left = mid + 1;
            else right = mid;
        }
        return vector<int>(arr.begin() + left, arr.begin() + left + k);
    }
};



// priority queue
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        auto comp = [&] (int i, int j) -> bool
        {
            if(abs(i - x) > abs(j - x))
                return true;
            else if(abs(i - x) < abs(j - x))
                return false;
            else
            {
                if(i > j)
                    return true;
                else
                    return false;
            }
                
        };
        priority_queue<int, vector<int>, decltype(comp)> pq(comp);
        
        for(int i = 0; i < arr.size(); i++)
            pq.push(arr[i]);
        
        
        vector<int> ans;
        
        for(int i = 0; i < k; i++)
        {
            int first = pq.top();
            pq.pop();
            ans.push_back(first);
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
    
};
