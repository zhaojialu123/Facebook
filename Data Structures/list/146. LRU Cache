class LRUCache {
public:
    list<pair<int, int>> l;
    map<int, list<pair<int, int>>:: iterator> m;
    int cap;
    LRUCache(int capacity) {
        cap = capacity;
    }
    
    int get(int key) {
        auto it = m.find(key);
        if(it == m.end())
            return -1;
        else
        {
            l.splice(l.begin(), l, it -> second);
            return it -> second -> second;
        }
    }
    
    void put(int key, int value) {
        auto it = m.find(key);
        if(it != m.end())
        {
            l.erase(it -> second);
        }
        
        l.push_front(make_pair(key, value));
        m[key] = l.begin();
        
        if(m.size() > cap)
        {
            int k = l.rbegin() -> first;
            l.pop_back();
            m.erase(k);
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
